%{
    #include <iostream>
    #include <map>
    #include <string>

    #include <cstdio>
    #include <cstdlib>
    #include <cmath>
    #include <cctype>
    #include <cstring>

    #include "mminilang.hpp"

    int yylex(YP_ARG_1, YP_ARG_2, YP_ARG_3);
    void yyerror(YP_ARG_1, YP_ARG_2, YP_ARG_3, char const *);
    double ycall(char *);
    double ycall(char *, double);
    double ycall(char *, double, double);

    void ysetvar(char *, double);
    double ygetvar(char *);

    double ygetarg(double, YP_ARG_3);

    std::map<std::string, double> variables;
%}

%union {
    double flo;
    char name[255];
}

%parse-param { YP_ARG_1 sti } 
%parse-param { YP_ARG_2 sto }
%parse-param { YP_ARG_3 args }
%lex-param { YP_ARG_1 sti }
%lex-param { YP_ARG_2 sto }
%lex-param { YP_ARG_3 args }

%token <flo> FLO
%token <name> NAME
%right '='
%left '+' '-'
%left '*' '/' '%'
%left '&' '|' 'x'
%left NEG NOT LOGIC_NOT
%left '^'
%left ARG

%type <flo> exp

%%

language:     /* nothing */
            | language statment
;

statment:     '\n'
            | exp
            | error                     { yyerrok; }
;

exp:      FLO                           { $$ = $1; }
        | NAME '(' ')'                  { $$ = ycall($1); }
        | NAME '(' exp ')'              { $$ = ycall($1, $3); }
        | NAME '(' exp ',' exp ')'      { $$ = ycall($1, $3, $5); }
        | NAME '=' exp                  { $$ = 1; ysetvar($1, $3); }
        | NAME                          { $$ = ygetvar($1); }
        | '_' exp %prec ARG             { $$ = ygetarg($2, args); }
        | '(' exp ')'                   { $$ = $2; }
        /* 1 Operand */
        | '-' exp %prec NEG             { $$ = - $2; }
        | '~' exp %prec NOT             { $$ = ~ static_cast<int>($2); }
        | '!' exp %prec LOGIC_NOT       { $$ = ! static_cast<int>($2); }
        /* 2 Operands */
        | exp '+' exp                   { $$ = $1 + $3; }
        | exp '-' exp                   { $$ = $1 - $3; }
        | exp '*' exp                   { $$ = $1 * $3; }
        | exp '/' exp                   { $$ = $1 / $3; }
        | exp '%' exp                   { $$ = static_cast<int>($1) % static_cast<int>($3); }
        | exp '^' exp                   { $$ = pow($1, $3); }
        | exp '&' exp                   { $$ = static_cast<int>($1) & static_cast<int>($3); }
        | exp '|' exp                   { $$ = static_cast<int>($1) | static_cast<int>($3); }
        | exp 'x' exp                   { $$ = static_cast<int>($1) ^ static_cast<int>($3); }
;

%%

int yylex(YP_ARG_1 sti, YP_ARG_2, YP_ARG_3)
{
    char c = static_cast<char>(0);
    
    while(c == ' ' || c == '\t' || c == static_cast<char>(0))
        c = sti.get();

    if(isdigit(c) || c == '.')
    {
        sti.putback(c);
        sti >> yylval.flo;
        return FLO;
    }
    else if(isalpha(c) && c != 'x')
    {
        size_t i;
        sti.putback(c);
        //sti.get(yylval.name, 255, '(');
        for(i = 0; i < 254 && isalpha(c); i++)
        {
            yylval.name[i] = c = sti.get();
        }
        sti.putback(yylval.name[i - 1]);
        yylval.name[i - 1] = static_cast<char>(0);
        return NAME;
    }
    else if(c == EOF)
        return 0;
    else
        return c;
}

void yyerror(YP_ARG_1, YP_ARG_2, YP_ARG_3, char const * str)
{
    std::cout << "Error: " << str << std::endl;
    exit(EXIT_FAILURE);
}


double ycall(char * func)
{
    if(strcmp(func, "exit") == 0)
    {
        exit(EXIT_SUCCESS);
        return 1;
    }
    else
        return 0;
}


double ycall(char * func, double a)
{
    if(strcmp(func, "sqrt") == 0)
        return sqrt(a);
    else if(strcmp(func, "print") == 0)
    {
        std::cout << a << std::endl;
        return 1;
    }
    else if(strcmp(func, "exit") == 0)
    {
        exit(static_cast<int>(a));
        return 1;
    }
    else
        return 0;
}

double ycall(char * func, double a, double b)
{
    if(strcmp(func, "gcd") == 0)
        return static_cast<double>(gcd(static_cast<unsigned>(a), static_cast<unsigned>(b)));
    else if(strcmp(func, "lcm") == 0)
        return static_cast<double>(lcm(static_cast<unsigned>(a), static_cast<unsigned>(b)));
    else if(strcmp(func, "root") == 0)
        return pow(a, 1.0/b);
    else
        return 0;
}

inline void ysetvar(char * name, double val)
{
    variables[std::string(name)] = val;
}

inline double ygetvar(char * name)
{
    return variables[std::string(name)];
}

double ygetarg(double key, YP_ARG_3 args)
{
    size_t ind = static_cast<size_t>(key);
    if(ind > args.size())
        return 0;
    else
        return args[ind - 1];
}