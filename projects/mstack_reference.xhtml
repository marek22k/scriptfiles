<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<!--
==========================
| page:     test.mk16.de |
| name:     mstack.h    |
| language: en           |
| type:     Reference    |
| version:  1.0          |
==========================
-->
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en">
	<head>
		<title>mstack.h Reference</title>
		
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<meta name="description" content="mstack.h Reference;" />
		<meta name="keywords" content="mstack.h reference, mstack reference, mstack_h reference" />
		<link rel="icon" type="image/vnd.microsoft.icon" href="/images/reference.ico" />
		<link rel="shortcut icon" type="image/vnd.microsoft.icon" href="/images/reference.ico" />
		
		<style type="text/css">
			table tr th {
				background-color: maroon;
				color: white;
			}
			
			table tr td, table tr th {
				border: 1px solid black;
			}
			
			table tr td p {
				display: inline;	
			}
			
			code {
				border: 1px solid gray;
				display: inline-block;
			}
		</style>
	</head>
	<body>
		<div>
			<h1>mstack.h Reference</h1>
			
			<a href="http://mk16.de/?page=Impressum" target="_blank">Impressum / Imprint</a>
			
			<div>
				<h2>Files</h2>
				
				<div>
					<h3>C</h3>
					<table>
						<thead>
							<tr>
								<th>File</th>
								<th>Download</th>
								<th>Size</th>
								<th>Description</th>
							</tr>
						</thead>
						<tbody>
							<tr>
								<td>mstack.h</td>
								<td><a href="//test.mk16.de/scriptFiles/mstack.h" target="_blank">test.mk16.de/scriptFiles/mstack.h</a></td>
								<td>840 Bytes(B)</td>
								<td>C header file</td>
							</tr>
							<tr>
								<td>mstack.c</td>
								<td><a href="//test.mk16.de/scriptFiles/mstack.c" target="_blank">test.mk16.de/scriptFiles/mstack.c</a></td>
								<td>1.5 KiloBytes(KB)</td>
								<td>C code file</td>
							</tr>
							<tr>
								<td>mstack.i</td>
								<td><a href="//test.mk16.de/scriptFiles/mstack.i" target="_blank">test.mk16.de/scriptFiles/mstack.i</a></td>
								<td>9.9 KiloBytes(KB)</td>
								<td>Preprocessor file</td>
							</tr>
							<tr>
								<td>mstack.o</td>
								<td><a href="//test.mk16.de/scriptFiles/mstack.o" target="_blank">test.mk16.de/scriptFiles/mstack.o</a></td>
								<td>1.5 KiloBytes(KB)</td>
								<td>Object file</td>
							</tr>
							<tr>
								<td>mstack.s</td>
								<td><a href="//test.mk16.de/scriptFiles/mstack.s" target="_blank">test.mk16.de/scriptFiles/mstack.s</a></td>
								<td>4.6 KiloBytes(B)</td>
								<td>Assembler source code</td>
							</tr>
						</tbody>
					</table>
				</div>
			</div>
			
			<div>
				<h2>Types</h2>
				<table>
					<thead>
						<tr>
							<th>Type</th>
							<th>Description</th>
							<th>Hint(s)</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>mstack</td>
							<td>To determine the size or the number of elements in the stack, you can use the attribute mstack.siz(unsigned long) .<br />To check if a stack is open, there is the attribute mstack.v (v = valid)(Type: MSTACK_BR), it is either 1 (open) or 0 (closed).<br />The MSTACK_TYPE * ptr attribute points to the pointer that points to the first element Stack.</td>
							<td>It is recommended to change the ptr attribute only with the functions provided.</td>
						</tr>
					</tbody>
				</table>
			</div>
			
			<div>
				<h2>Functions</h2>
				<table>
					<thead>
						<tr>
							<th>Function/Declaration</th>
							<th>Description</th>
							<th>Argument 1</th>
							<th>Argument 2</th>
							<th>Return</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>MSTACK_BR mstack_init(mstack * msk);</td>
							<td>Opens (initializes) a mstack.</td>
							<td>The address of the mstack to be opened (initialized).</td>
							<td></td>
							<td>Returns 0 on failure, otherwise 1.</td>
						</tr>
						<tr>
							<td>MSTACK_BR mstack_push(mstack * msk, MSTACK_TYPE x);</td>
							<td>Added an element to the mstack.</td>
							<td>The address of the mstack to which an item is to be added.</td>
							<td>The element (by default of type long) to be added.</td>
							<td>Returns 0 on failure, otherwise 1.</td>
						</tr>
						<tr>
							<td>MSTACK_BR mstack_pop(mstack * msk, MSTACK_TYPE * x);</td>
							<td>Deletes the last element of a mstack.</td>
							<td>The address of the mstack from which the last element should be deleted.</td>
							<td>The address, a variable in which, the last value, of the element to be deleted is to be stored, if not a null pointer (NULL or ((void *) 0)) can be passed.</td>
							<td>Returns 0 on failure, otherwise 1.</td>
						</tr>
						<tr>
							<td>MSTACK_BR mstack_top(mstack * msk, MSTACK_TYPE * x);</td>
							<td>Returns the value of the top element of an mstack.</td>
							<td>The address of the mstack from which the value of the upper element should be returned.</td>
							<td>The address, the variable in which to store the value.</td>
							<td>Returns 0 on failure, otherwise 1.</td>
						</tr>
						<tr>
							<td>MSTACK_BR mstack_close(mstack * msk);</td>
							<td>Closes a mstack; If the function is not performed, a memory leak is likely to occur.</td>
							<td>The address of the mstack to be closed.</td>
							<td></td>
							<td>Returns 0 on failure, otherwise 1.</td>
						</tr>
					</tbody>
				</table>
			</div>
			
			<div>
				<h2>Macros</h2>
				<table>
					<thead>
						<tr>
							<th>Macro</th>
							<th>Description</th>
							<th>Value</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<td>MSTACK_H</td>
							<td>None</td>
							<td>None</td>
						</tr>
						<tr>
							<td>MSTACK_BR</td>
							<td>The return type</td>
							<td>bool, _Bool, or int</td>
						</tr>
						<tr>
							<td>MSTACK_TYPE</td>
							<td>The stack type, by default long.</td>
							<td>long</td>
						</tr>
					</tbody>
				</table>
			</div>
			
			<div>
				<h2>Example</h2>
				<code>
					#include &lt;stdio.h&gt;&nbsp; /* printf */<br />
					#include &lt;stdlib.h&gt;&nbsp; /* abort */<br />
					#include &quot;mstack.h&quot;&nbsp; /* mstack, mstack_init, mstack_push, mstack_top, mstack_pop, mstack_close */<br />
					<br />
					#define IF_0_ABORT(func) if(!(func)) abort();<br />
					<br />
					int main()<br />
					{<br />
					&nbsp;&nbsp;&nbsp; mstack sk1;<br />
					&nbsp;&nbsp;&nbsp; long x;<br />
					&nbsp;&nbsp;&nbsp; register int i;<br />
					&nbsp;&nbsp;&nbsp; IF_0_ABORT(mstack_init(&amp;sk1))<br />
					<br />
					&nbsp;&nbsp;&nbsp; for(i = 0; i &lt; 10; i++)<br />
					&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; IF_0_ABORT(mstack_push(&amp;sk1, i))<br />
					<br />
					&nbsp;&nbsp;&nbsp; IF_0_ABORT(mstack_top(&amp;sk1, &amp;x))<br />
					&nbsp;&nbsp;&nbsp; printf(&quot;%ld - 2 = &quot;, x);<br />
					<br />
					&nbsp;&nbsp;&nbsp; IF_0_ABORT(mstack_pop(&amp;sk1, NULL))<br />
					&nbsp;&nbsp;&nbsp; IF_0_ABORT(mstack_pop(&amp;sk1, NULL))<br />
					<br />
					&nbsp;&nbsp;&nbsp; IF_0_ABORT(mstack_top(&amp;sk1, &amp;x))<br />
					&nbsp;&nbsp;&nbsp; printf(&quot;%ld&quot;, x);<br />
					<br />
					&nbsp;&nbsp;&nbsp; IF_0_ABORT(mstack_close(&amp;sk1))<br />
					&nbsp;&nbsp;&nbsp; return 0;<br />
					}
				</code>
				<p>Output: 9 - 2 = 7</p>
			</div>
		</div>
		<div id="footer">
			<table>
				<tbody>
					<tr>
						<td>Web author/Author: Marek K.</td>
						<td><a href="http://mk16.de/?page=Impressum" target="_blank">Impressum / Imprint</a></td>
					</tr>
					<tr>
						<td><p><a href="http://validator.w3.org/check?uri=https%3A%2F%2Ftest.mk16.de%2Fprojects%2Fmstack_reference.xhtml" target="_blank"><img src="https://www.w3.org/Icons/valid-xhtml10" alt="Valid XHTML 1.0 Transitional" height="31" width="88" /></a></p></td>
						<td><p><a href="https://jigsaw.w3.org/css-validator/check/referer" target="_blank"><img style="border:0;width:88px;height:31px" src="https://jigsaw.w3.org/css-validator/images/vcss" alt="CSS is valid!" /></a></p></td>
					</tr>
				</tbody>
			</table>
		</div>
	</body>
</html>